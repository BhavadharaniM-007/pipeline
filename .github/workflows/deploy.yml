<<<<<<< HEAD
name: Deploy with Terraform and Ansible

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  terraform_apply:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{steps.get_ec2_ip.outputs.ec2_ip}}
      ubuntu_ip: ${{steps.get_ubuntu_ip.outputs.ubuntu_ip}}

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: terraform apply -auto-approve

    - name: Get EC2 public IP
      id: get_ec2_ip
      run:  |
         RAW_OUTPUT=$(terraform output -raw ec2_user_public_ip 2>/dev/null)
         IP=$(echo "$RAW_OUTPUT" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
    
         if [ -z "$IP" ]; then
          echo "Failed to get a valid IP address from Terraform output"
          exit 1
          fi
    
          echo "ec2_ip=$IP" >> $GITHUB_OUTPUT
    - name: Get Ubuntu Public IP   
      id: get_ubuntu_ip
      run: |
        RAW_OUTPUT=$(terraform output -raw ubuntu_user_public_ip 2>/dev/null)
        IP=$(echo "$RAW_OUTPUT" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')

        if [ -z "$IP" ]; then
        echo "Failed to get a valid Ubuntu IP address from Terraform output"
        exit 1
        fi

        echo "ubuntu_ip=$IP" >> $GITHUB_OUTPUT
  ansible_deploy:
    runs-on: ubuntu-latest
    needs: terraform_apply

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa_github_actions_new
        chmod 600 ~/.ssh/id_rsa_github_actions_new

    - name: Generate dynamic inventory.ini
      run: |
        echo "[app]" > inventory.ini
        echo "${{ needs.terraform_apply.outputs.ec2_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa_github_actions_new" >> inventory.ini
        echo "${{ needs.terraform_apply.outputs.ubuntu_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa_github_actions_new" >> inventory.ini

    - name: Add EC2 hosts to known_hosts
      run: |
        ssh-keyscan -H ${{ needs.terraform_apply.outputs.ec2_ip }} >> ~/.ssh/known_hosts
        ssh-keyscan -H ${{ needs.terraform_apply.outputs.ubuntu_ip }} >> ~/.ssh/known_hosts

    - name: Install Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible

    - name: Run Ansible Playbook
      env:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      run: ansible-playbook -i inventory.ini playbook.yml --private-key /home/runner/.ssh/id_rsa_github_actions_new
=======
name: CI/CD â€” Deploy Infra & App

on:
  push:
    branches:
      - demo   # or whichever branch you want to trigger on

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "us-east-1"
      TF_DIR: "."      # since your `.tf` files are in project root
      ANSIBLE_DIR: "ansible"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.6.0"   # or version you use

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_DIR }}

    - name: Terraform Apply (auto-approve)
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_DIR }}

    - name: Get EC2 Public IP from Terraform
      id: get_ip
      run: |
        IP=$(terraform output -raw web_server_public_ip)
        echo "EC2_IP=$IP" >> $GITHUB_ENV
      working-directory: ${{ env.TF_DIR }}

    - name: Create Ansible Inventory File
      run: |
        mkdir -p ${ANSIBLE_DIR}/inventories
        echo "[web]" > ${ANSIBLE_DIR}/inventories/hosts
        echo "ec2-user@${{ env.EC2_IP }} ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_user=ec2-user" >> ${ANSIBLE_DIR}/inventories/hosts

    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

    - name: Setup SSH Key for Ansible
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_github_actions_new
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts

    - name: Run Ansible Playbook
      run: |
        ansible-playbook -i ${ANSIBLE_DIR}/inventories/hosts ${ANSIBLE_DIR}/playbooks/deploy.yml | tee ansible_deploy.log

    - name: Upload Ansible Log as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ansible-deploy-log
        path: ansible_deploy.log
>>>>>>> 0f1883e (initial commit)
